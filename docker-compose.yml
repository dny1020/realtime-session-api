version: "3.8"

services:
  # ------------------------------
  # PostgreSQL Database
  # ------------------------------
  postgres:
    image: postgres:15.5-alpine
    container_name: contactcenter_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-net
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1",
        ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    security_opt:
      - no-new-privileges:true

  # ------------------------------
  # FastAPI - Contact Center API
  # ------------------------------
  # NOTE: Asterisk service is deployed separately as an external service.
  # Ensure ARI_HTTP_URL points to your Asterisk server.
  # ------------------------------
  api:
    build: .
    container_name: contactcenter_api
    ports:
      - "8000:8000"
    environment:
      - APP_NAME=${APP_NAME:-Contact Center API}
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - DISABLE_DB=${DISABLE_DB:-false}
      - ARI_HTTP_URL=${ARI_HTTP_URL}
      - ARI_USERNAME=${ARI_USERNAME}
      - ARI_PASSWORD=${ARI_PASSWORD}
      - ARI_APP=${ARI_APP:-contactcenter}
      - DEFAULT_CONTEXT=${DEFAULT_CONTEXT:-outbound-ivr}
      - DEFAULT_EXTENSION=${DEFAULT_EXTENSION:-s}
      - DEFAULT_PRIORITY=${DEFAULT_PRIORITY:-1}
      - DEFAULT_TIMEOUT=${DEFAULT_TIMEOUT:-30000}
      - DEFAULT_CALLER_ID=${DEFAULT_CALLER_ID:-Outbound Call}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - JWT_ISSUER=${JWT_ISSUER:-}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-}
      - DOCS_ENABLED=${DOCS_ENABLED:-true}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-*}
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./audio:/app/audio
      - ./logs:/app/logs
    networks:
      - app-net
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:

networks:
  app-net:
    driver: bridge
