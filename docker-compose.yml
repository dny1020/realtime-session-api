services:
  # ------------------------------
  # PostgreSQL Database
  # ------------------------------
  postgres:
    image: postgres:15.5-alpine
    container_name: contactcenter_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
      - traefik_net
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1",
        ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped

  # ------------------------------
  # Redis - Distributed Locking & Rate Limiting & Celery Broker
  # ------------------------------
  redis:
    image: redis:7-alpine
    container_name: contactcenter_redis
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - internal
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    restart: unless-stopped

  # ------------------------------
  # FastAPI - Contact Center API
  # ------------------------------
  api:
    build: .
    container_name: contactcenter_api
    environment:
      - APP_NAME=${APP_NAME:-Contact Center API}
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - DISABLE_DB=${DISABLE_DB:-false}
      - REDIS_URL=redis://redis:6379/0
      - ARI_HTTP_URL=${ARI_HTTP_URL}
      - ARI_USERNAME=${ARI_USERNAME}
      - ARI_PASSWORD=${ARI_PASSWORD}
      - ARI_APP=${ARI_APP:-contactcenter}
      - DEFAULT_CONTEXT=${DEFAULT_CONTEXT:-outbound-ivr}
      - DEFAULT_EXTENSION=${DEFAULT_EXTENSION:-s}
      - DEFAULT_PRIORITY=${DEFAULT_PRIORITY:-1}
      - DEFAULT_TIMEOUT=${DEFAULT_TIMEOUT:-30000}
      - DEFAULT_CALLER_ID=${DEFAULT_CALLER_ID:-Outbound Call}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - JWT_ISSUER=${JWT_ISSUER:-}
      - JWT_AUDIENCE=${JWT_AUDIENCE:-}
      - DOCS_ENABLED=${DOCS_ENABLED:-false}
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - CIRCUIT_BREAKER_ENABLED=${CIRCUIT_BREAKER_ENABLED:-true}
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
      - OTEL_ENABLED=${OTEL_ENABLED:-false}
      - OTEL_ENDPOINT=${OTEL_ENDPOINT:-}
      - PYTHONUNBUFFERED=1
      - TZ=${TZ:-UTC}
    labels:
      # Enable Traefik
      - "traefik.enable=true"
      
      # HTTP Router - Redirect to HTTPS
      - "traefik.http.routers.contactcenter-api-http.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.routers.contactcenter-api-http.entrypoints=web"
      - "traefik.http.routers.contactcenter-api-http.middlewares=redirect-to-https"
      
      # HTTPS Router
      - "traefik.http.routers.contactcenter-api.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.routers.contactcenter-api.entrypoints=websecure"
      - "traefik.http.routers.contactcenter-api.tls=true"
      - "traefik.http.routers.contactcenter-api.tls.certresolver=myresolver"
      - "traefik.http.routers.contactcenter-api.middlewares=security-headers"
      
      # Service Configuration
      - "traefik.http.services.contactcenter-api.loadbalancer.server.port=8000"
      - "traefik.http.services.contactcenter-api.loadbalancer.server.scheme=http"
      - "traefik.http.services.contactcenter-api.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.contactcenter-api.loadbalancer.healthcheck.interval=30s"
      - "traefik.http.services.contactcenter-api.loadbalancer.healthcheck.timeout=5s"
      
      # Middlewares
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"
      
      # Security Headers
      - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.security-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.security-headers.headers.customResponseHeaders.X-Robots-Tag=noindex,nofollow"
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./audio:/app/audio
      - ./logs:/app/logs
    networks:
      - internal
      - traefik_net
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ------------------------------
  # Celery Worker - Async Task Processing
  # ------------------------------
  celery_worker:
    build: .
    container_name: contactcenter_celery_worker
    command: celery -A app.celery_app worker --loglevel=info --concurrency=4 -Q default,retry,maintenance
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ARI_HTTP_URL=${ARI_HTTP_URL}
      - ARI_USERNAME=${ARI_USERNAME}
      - ARI_PASSWORD=${ARI_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - internal
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  # ------------------------------
  # Celery Beat - Task Scheduler
  # ------------------------------
  celery_beat:
    build: .
    container_name: contactcenter_celery_beat
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - internal
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ------------------------------
  # Flower - Celery Monitoring (Optional)
  # ------------------------------
  flower:
    build: .
    container_name: contactcenter_flower
    command: celery -A app.celery_app flower --port=5555 --basic_auth=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-change_me}
    environment:
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
    depends_on:
      - redis
      - celery_worker
    ports:
      - "5555:5555"  # Access at http://localhost:5555
    networks:
      - internal
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    profiles:
      - monitoring  # Only start with: docker-compose --profile monitoring up

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  # Internal network for service-to-service communication
  internal:
    driver: bridge
    internal: true
  
  # External network for Traefik (must be created externally)
  traefik_net:
    external: true
